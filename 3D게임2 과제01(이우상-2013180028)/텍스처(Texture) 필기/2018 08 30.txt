-밉맵을 사용하면 메모리는 더 사용하게 되지만, 성능은 좋아진다.
=> UI 텍스쳐들은 밉맵을 만들지 않는다. 왜냐하면, 크기가 일정하기 때문에

모든 텍스쳐들은 정규화가되면, 픽셸을 좌표는 바뀌지만, 정규화된 좌표계는
0, 1로 사용한다. (u, v 좌표)

- 텍스쳐들은 폴리건의 모양대로 바뀔 수 있다. => 텍스쳐의 자를 모양과,
폴리곤의 모양이 다를 경우. 

- 텍스쳐 좌표는 다이렉트, 엔진 등 다를 수 있다.
=> 다이렉트는 좌측 상단이 (0, 0)
=> 다른 것들은 좌측 하단이 (0, 0)
=> 1 - v만 해주면 된다.

- 텍스쳐 좌표들을 각각 레스터라이저에서 보간작업을 하면, 픽셸
셰이더에서 색을 칠할 수 있음

텍스쳐 좌표에서 픽셸 좌표로 바꿀때는 가로, 세로 크기를 곱하면 된다.
그러나 텍스쳐 좌표는 실수 값인데, 픽셸좌표 값이 정수가 된다.
(실수 아님)
=> (u, v) * (w, h) = (U, V) (정수 값)

* 텍스쳐를 매핑할 때, 샘플링과 필터링의 개념이 필요하다.

- 샘플러 객체 : 샘플링과 필터링을 해준다.

- 텍스쳐 매핑은 질감을 나타내기 위해 사용한다. 그러나 폴리곤의
모양이 늘어나면, 질감이 이상해짐

- 디테일 매칭 : 하나의 텍스쳐에 텍스쳐 좌표가 1개 이상이면서,
큰 폴리곤에 다닥다닥 붙여 질감을 살리는 기법

- 그래픽카드의 메모리를 가장 많이 차지하는 것은 텍스쳐이다.

게임에서 표현하려는 공간이 많을 수록 텍스쳐의 크기도 크므로,

- 텍스쳐 압축 : 크기를 줄이는 것

* Non Lossy : 비손실 압축

* Lossy : 손실 압축 - 블럭 압축(Block Compression)
=> 다이렉트3D에서 사용

텍스쳐들은 가로, 세로의 크기가 2^n이 되도록 만들어야 한다.

사람의 눈은 텍스쳐를 압축해도 잘 픽셸의 색상을 알아보지 못한다.
그러면서, 별차이 없게 보이면서, 질감의 차이를 느끼지 못함
따라서 텍스쳐의 크기는 원본보다 8배 줄은다. 압축 텍스쳐 포맷으로
만들어 사용한다.

★텍스쳐 매핑을 할때는 1. 밉맵을 사용 2. 블럭 압축을 사용

압축을 푸는건 GPU가 알아서 풀음

★DDS(Direct Draw Surface) 형식 파일로 바꾸는 법
PNG, JPG 등 => DDS











